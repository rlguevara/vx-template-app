schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

input Int_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _cast: Int_cast_exp
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "lr_academy_category"
"""
type lr_academy_category {
  category_description: String!
  category_image_url: String!
  category_name: String!
  id: Int!

  """An array relationship"""
  lr_academy_courses(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): [lr_academy_course!]!

  """An aggregate relationship"""
  lr_academy_courses_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): lr_academy_course_aggregate!
}

"""
aggregated selection of "lr_academy_category"
"""
type lr_academy_category_aggregate {
  aggregate: lr_academy_category_aggregate_fields
  nodes: [lr_academy_category!]!
}

"""
aggregate fields of "lr_academy_category"
"""
type lr_academy_category_aggregate_fields {
  avg: lr_academy_category_avg_fields
  count(columns: [lr_academy_category_select_column!], distinct: Boolean): Int!
  max: lr_academy_category_max_fields
  min: lr_academy_category_min_fields
  stddev: lr_academy_category_stddev_fields
  stddev_pop: lr_academy_category_stddev_pop_fields
  stddev_samp: lr_academy_category_stddev_samp_fields
  sum: lr_academy_category_sum_fields
  var_pop: lr_academy_category_var_pop_fields
  var_samp: lr_academy_category_var_samp_fields
  variance: lr_academy_category_variance_fields
}

"""aggregate avg on columns"""
type lr_academy_category_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "lr_academy_category". All fields are combined with a logical 'AND'.
"""
input lr_academy_category_bool_exp {
  _and: [lr_academy_category_bool_exp!]
  _not: lr_academy_category_bool_exp
  _or: [lr_academy_category_bool_exp!]
  category_description: String_comparison_exp
  category_image_url: String_comparison_exp
  category_name: String_comparison_exp
  id: Int_comparison_exp
  lr_academy_courses: lr_academy_course_bool_exp
}

"""
unique or primary key constraints on table "lr_academy_category"
"""
enum lr_academy_category_constraint {
  """
  unique or primary key constraint on columns "category_name"
  """
  lr_academy_category_category_name_key

  """
  unique or primary key constraint on columns "id"
  """
  lr_academy_category_pkey
}

"""
input type for incrementing numeric columns in table "lr_academy_category"
"""
input lr_academy_category_inc_input {
  id: Int
}

"""
input type for inserting data into table "lr_academy_category"
"""
input lr_academy_category_insert_input {
  category_description: String
  category_image_url: String
  category_name: String
  id: Int
  lr_academy_courses: lr_academy_course_arr_rel_insert_input
}

"""aggregate max on columns"""
type lr_academy_category_max_fields {
  category_description: String
  category_image_url: String
  category_name: String
  id: Int
}

"""aggregate min on columns"""
type lr_academy_category_min_fields {
  category_description: String
  category_image_url: String
  category_name: String
  id: Int
}

"""
response of any mutation on the table "lr_academy_category"
"""
type lr_academy_category_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lr_academy_category!]!
}

"""
input type for inserting object relation for remote table "lr_academy_category"
"""
input lr_academy_category_obj_rel_insert_input {
  data: lr_academy_category_insert_input!

  """upsert condition"""
  on_conflict: lr_academy_category_on_conflict
}

"""
on_conflict condition type for table "lr_academy_category"
"""
input lr_academy_category_on_conflict {
  constraint: lr_academy_category_constraint!
  update_columns: [lr_academy_category_update_column!]! = []
  where: lr_academy_category_bool_exp
}

"""Ordering options when selecting data from "lr_academy_category"."""
input lr_academy_category_order_by {
  category_description: order_by
  category_image_url: order_by
  category_name: order_by
  id: order_by
  lr_academy_courses_aggregate: lr_academy_course_aggregate_order_by
}

"""primary key columns input for table: lr_academy_category"""
input lr_academy_category_pk_columns_input {
  id: Int!
}

"""
select columns of table "lr_academy_category"
"""
enum lr_academy_category_select_column {
  """column name"""
  category_description

  """column name"""
  category_image_url

  """column name"""
  category_name

  """column name"""
  id
}

"""
input type for updating data in table "lr_academy_category"
"""
input lr_academy_category_set_input {
  category_description: String
  category_image_url: String
  category_name: String
  id: Int
}

"""aggregate stddev on columns"""
type lr_academy_category_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type lr_academy_category_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type lr_academy_category_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type lr_academy_category_sum_fields {
  id: Int
}

"""
update columns of table "lr_academy_category"
"""
enum lr_academy_category_update_column {
  """column name"""
  category_description

  """column name"""
  category_image_url

  """column name"""
  category_name

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type lr_academy_category_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type lr_academy_category_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type lr_academy_category_variance_fields {
  id: Float
}

"""
columns and relationships of "lr_academy_course"
"""
type lr_academy_course {
  category_id: Int!
  course_description: String!
  course_image_url: String!
  course_name: String!
  id: Int!

  """An object relationship"""
  lr_academy_category: lr_academy_category!

  """An object relationship"""
  lr_academy_course_content: lr_academy_course_content
}

"""
aggregated selection of "lr_academy_course"
"""
type lr_academy_course_aggregate {
  aggregate: lr_academy_course_aggregate_fields
  nodes: [lr_academy_course!]!
}

"""
aggregate fields of "lr_academy_course"
"""
type lr_academy_course_aggregate_fields {
  avg: lr_academy_course_avg_fields
  count(columns: [lr_academy_course_select_column!], distinct: Boolean): Int!
  max: lr_academy_course_max_fields
  min: lr_academy_course_min_fields
  stddev: lr_academy_course_stddev_fields
  stddev_pop: lr_academy_course_stddev_pop_fields
  stddev_samp: lr_academy_course_stddev_samp_fields
  sum: lr_academy_course_sum_fields
  var_pop: lr_academy_course_var_pop_fields
  var_samp: lr_academy_course_var_samp_fields
  variance: lr_academy_course_variance_fields
}

"""
order by aggregate values of table "lr_academy_course"
"""
input lr_academy_course_aggregate_order_by {
  avg: lr_academy_course_avg_order_by
  count: order_by
  max: lr_academy_course_max_order_by
  min: lr_academy_course_min_order_by
  stddev: lr_academy_course_stddev_order_by
  stddev_pop: lr_academy_course_stddev_pop_order_by
  stddev_samp: lr_academy_course_stddev_samp_order_by
  sum: lr_academy_course_sum_order_by
  var_pop: lr_academy_course_var_pop_order_by
  var_samp: lr_academy_course_var_samp_order_by
  variance: lr_academy_course_variance_order_by
}

"""
input type for inserting array relation for remote table "lr_academy_course"
"""
input lr_academy_course_arr_rel_insert_input {
  data: [lr_academy_course_insert_input!]!

  """upsert condition"""
  on_conflict: lr_academy_course_on_conflict
}

"""aggregate avg on columns"""
type lr_academy_course_avg_fields {
  category_id: Float
  id: Float
}

"""
order by avg() on columns of table "lr_academy_course"
"""
input lr_academy_course_avg_order_by {
  category_id: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "lr_academy_course". All fields are combined with a logical 'AND'.
"""
input lr_academy_course_bool_exp {
  _and: [lr_academy_course_bool_exp!]
  _not: lr_academy_course_bool_exp
  _or: [lr_academy_course_bool_exp!]
  category_id: Int_comparison_exp
  course_description: String_comparison_exp
  course_image_url: String_comparison_exp
  course_name: String_comparison_exp
  id: Int_comparison_exp
  lr_academy_category: lr_academy_category_bool_exp
  lr_academy_course_content: lr_academy_course_content_bool_exp
}

"""
unique or primary key constraints on table "lr_academy_course"
"""
enum lr_academy_course_constraint {
  """
  unique or primary key constraint on columns "course_name"
  """
  lr_academy_course_course_name_key

  """
  unique or primary key constraint on columns "id"
  """
  lr_academy_course_pkey
}

"""
columns and relationships of "lr_academy_course_content"
"""
type lr_academy_course_content {
  content_description: String!
  content_name: String!
  content_type: String!
  content_url: String!
  course_id: Int!
  id: Int!

  """An object relationship"""
  lr_academy_course: lr_academy_course!
}

"""
aggregated selection of "lr_academy_course_content"
"""
type lr_academy_course_content_aggregate {
  aggregate: lr_academy_course_content_aggregate_fields
  nodes: [lr_academy_course_content!]!
}

"""
aggregate fields of "lr_academy_course_content"
"""
type lr_academy_course_content_aggregate_fields {
  avg: lr_academy_course_content_avg_fields
  count(columns: [lr_academy_course_content_select_column!], distinct: Boolean): Int!
  max: lr_academy_course_content_max_fields
  min: lr_academy_course_content_min_fields
  stddev: lr_academy_course_content_stddev_fields
  stddev_pop: lr_academy_course_content_stddev_pop_fields
  stddev_samp: lr_academy_course_content_stddev_samp_fields
  sum: lr_academy_course_content_sum_fields
  var_pop: lr_academy_course_content_var_pop_fields
  var_samp: lr_academy_course_content_var_samp_fields
  variance: lr_academy_course_content_variance_fields
}

"""aggregate avg on columns"""
type lr_academy_course_content_avg_fields {
  course_id: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "lr_academy_course_content". All fields are combined with a logical 'AND'.
"""
input lr_academy_course_content_bool_exp {
  _and: [lr_academy_course_content_bool_exp!]
  _not: lr_academy_course_content_bool_exp
  _or: [lr_academy_course_content_bool_exp!]
  content_description: String_comparison_exp
  content_name: String_comparison_exp
  content_type: String_comparison_exp
  content_url: String_comparison_exp
  course_id: Int_comparison_exp
  id: Int_comparison_exp
  lr_academy_course: lr_academy_course_bool_exp
}

"""
unique or primary key constraints on table "lr_academy_course_content"
"""
enum lr_academy_course_content_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  lr_academy_course_content_pkey
}

"""
input type for incrementing numeric columns in table "lr_academy_course_content"
"""
input lr_academy_course_content_inc_input {
  course_id: Int
  id: Int
}

"""
input type for inserting data into table "lr_academy_course_content"
"""
input lr_academy_course_content_insert_input {
  content_description: String
  content_name: String
  content_type: String
  content_url: String
  course_id: Int
  id: Int
  lr_academy_course: lr_academy_course_obj_rel_insert_input
}

"""aggregate max on columns"""
type lr_academy_course_content_max_fields {
  content_description: String
  content_name: String
  content_type: String
  content_url: String
  course_id: Int
  id: Int
}

"""aggregate min on columns"""
type lr_academy_course_content_min_fields {
  content_description: String
  content_name: String
  content_type: String
  content_url: String
  course_id: Int
  id: Int
}

"""
response of any mutation on the table "lr_academy_course_content"
"""
type lr_academy_course_content_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lr_academy_course_content!]!
}

"""
input type for inserting object relation for remote table "lr_academy_course_content"
"""
input lr_academy_course_content_obj_rel_insert_input {
  data: lr_academy_course_content_insert_input!

  """upsert condition"""
  on_conflict: lr_academy_course_content_on_conflict
}

"""
on_conflict condition type for table "lr_academy_course_content"
"""
input lr_academy_course_content_on_conflict {
  constraint: lr_academy_course_content_constraint!
  update_columns: [lr_academy_course_content_update_column!]! = []
  where: lr_academy_course_content_bool_exp
}

"""Ordering options when selecting data from "lr_academy_course_content"."""
input lr_academy_course_content_order_by {
  content_description: order_by
  content_name: order_by
  content_type: order_by
  content_url: order_by
  course_id: order_by
  id: order_by
  lr_academy_course: lr_academy_course_order_by
}

"""primary key columns input for table: lr_academy_course_content"""
input lr_academy_course_content_pk_columns_input {
  id: Int!
}

"""
select columns of table "lr_academy_course_content"
"""
enum lr_academy_course_content_select_column {
  """column name"""
  content_description

  """column name"""
  content_name

  """column name"""
  content_type

  """column name"""
  content_url

  """column name"""
  course_id

  """column name"""
  id
}

"""
input type for updating data in table "lr_academy_course_content"
"""
input lr_academy_course_content_set_input {
  content_description: String
  content_name: String
  content_type: String
  content_url: String
  course_id: Int
  id: Int
}

"""aggregate stddev on columns"""
type lr_academy_course_content_stddev_fields {
  course_id: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type lr_academy_course_content_stddev_pop_fields {
  course_id: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type lr_academy_course_content_stddev_samp_fields {
  course_id: Float
  id: Float
}

"""aggregate sum on columns"""
type lr_academy_course_content_sum_fields {
  course_id: Int
  id: Int
}

"""
update columns of table "lr_academy_course_content"
"""
enum lr_academy_course_content_update_column {
  """column name"""
  content_description

  """column name"""
  content_name

  """column name"""
  content_type

  """column name"""
  content_url

  """column name"""
  course_id

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type lr_academy_course_content_var_pop_fields {
  course_id: Float
  id: Float
}

"""aggregate var_samp on columns"""
type lr_academy_course_content_var_samp_fields {
  course_id: Float
  id: Float
}

"""aggregate variance on columns"""
type lr_academy_course_content_variance_fields {
  course_id: Float
  id: Float
}

"""
input type for incrementing numeric columns in table "lr_academy_course"
"""
input lr_academy_course_inc_input {
  category_id: Int
  id: Int
}

"""
input type for inserting data into table "lr_academy_course"
"""
input lr_academy_course_insert_input {
  category_id: Int
  course_description: String
  course_image_url: String
  course_name: String
  id: Int
  lr_academy_category: lr_academy_category_obj_rel_insert_input
  lr_academy_course_content: lr_academy_course_content_obj_rel_insert_input
}

"""aggregate max on columns"""
type lr_academy_course_max_fields {
  category_id: Int
  course_description: String
  course_image_url: String
  course_name: String
  id: Int
}

"""
order by max() on columns of table "lr_academy_course"
"""
input lr_academy_course_max_order_by {
  category_id: order_by
  course_description: order_by
  course_image_url: order_by
  course_name: order_by
  id: order_by
}

"""aggregate min on columns"""
type lr_academy_course_min_fields {
  category_id: Int
  course_description: String
  course_image_url: String
  course_name: String
  id: Int
}

"""
order by min() on columns of table "lr_academy_course"
"""
input lr_academy_course_min_order_by {
  category_id: order_by
  course_description: order_by
  course_image_url: order_by
  course_name: order_by
  id: order_by
}

"""
response of any mutation on the table "lr_academy_course"
"""
type lr_academy_course_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [lr_academy_course!]!
}

"""
input type for inserting object relation for remote table "lr_academy_course"
"""
input lr_academy_course_obj_rel_insert_input {
  data: lr_academy_course_insert_input!

  """upsert condition"""
  on_conflict: lr_academy_course_on_conflict
}

"""
on_conflict condition type for table "lr_academy_course"
"""
input lr_academy_course_on_conflict {
  constraint: lr_academy_course_constraint!
  update_columns: [lr_academy_course_update_column!]! = []
  where: lr_academy_course_bool_exp
}

"""Ordering options when selecting data from "lr_academy_course"."""
input lr_academy_course_order_by {
  category_id: order_by
  course_description: order_by
  course_image_url: order_by
  course_name: order_by
  id: order_by
  lr_academy_category: lr_academy_category_order_by
  lr_academy_course_content: lr_academy_course_content_order_by
}

"""primary key columns input for table: lr_academy_course"""
input lr_academy_course_pk_columns_input {
  id: Int!
}

"""
select columns of table "lr_academy_course"
"""
enum lr_academy_course_select_column {
  """column name"""
  category_id

  """column name"""
  course_description

  """column name"""
  course_image_url

  """column name"""
  course_name

  """column name"""
  id
}

"""
input type for updating data in table "lr_academy_course"
"""
input lr_academy_course_set_input {
  category_id: Int
  course_description: String
  course_image_url: String
  course_name: String
  id: Int
}

"""aggregate stddev on columns"""
type lr_academy_course_stddev_fields {
  category_id: Float
  id: Float
}

"""
order by stddev() on columns of table "lr_academy_course"
"""
input lr_academy_course_stddev_order_by {
  category_id: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type lr_academy_course_stddev_pop_fields {
  category_id: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "lr_academy_course"
"""
input lr_academy_course_stddev_pop_order_by {
  category_id: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type lr_academy_course_stddev_samp_fields {
  category_id: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "lr_academy_course"
"""
input lr_academy_course_stddev_samp_order_by {
  category_id: order_by
  id: order_by
}

"""aggregate sum on columns"""
type lr_academy_course_sum_fields {
  category_id: Int
  id: Int
}

"""
order by sum() on columns of table "lr_academy_course"
"""
input lr_academy_course_sum_order_by {
  category_id: order_by
  id: order_by
}

"""
update columns of table "lr_academy_course"
"""
enum lr_academy_course_update_column {
  """column name"""
  category_id

  """column name"""
  course_description

  """column name"""
  course_image_url

  """column name"""
  course_name

  """column name"""
  id
}

"""aggregate var_pop on columns"""
type lr_academy_course_var_pop_fields {
  category_id: Float
  id: Float
}

"""
order by var_pop() on columns of table "lr_academy_course"
"""
input lr_academy_course_var_pop_order_by {
  category_id: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type lr_academy_course_var_samp_fields {
  category_id: Float
  id: Float
}

"""
order by var_samp() on columns of table "lr_academy_course"
"""
input lr_academy_course_var_samp_order_by {
  category_id: order_by
  id: order_by
}

"""aggregate variance on columns"""
type lr_academy_course_variance_fields {
  category_id: Float
  id: Float
}

"""
order by variance() on columns of table "lr_academy_course"
"""
input lr_academy_course_variance_order_by {
  category_id: order_by
  id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "lr_academy_category"
  """
  delete_lr_academy_category(
    """filter the rows which have to be deleted"""
    where: lr_academy_category_bool_exp!
  ): lr_academy_category_mutation_response

  """
  delete single row from the table: "lr_academy_category"
  """
  delete_lr_academy_category_by_pk(id: Int!): lr_academy_category

  """
  delete data from the table: "lr_academy_course"
  """
  delete_lr_academy_course(
    """filter the rows which have to be deleted"""
    where: lr_academy_course_bool_exp!
  ): lr_academy_course_mutation_response

  """
  delete single row from the table: "lr_academy_course"
  """
  delete_lr_academy_course_by_pk(id: Int!): lr_academy_course

  """
  delete data from the table: "lr_academy_course_content"
  """
  delete_lr_academy_course_content(
    """filter the rows which have to be deleted"""
    where: lr_academy_course_content_bool_exp!
  ): lr_academy_course_content_mutation_response

  """
  delete single row from the table: "lr_academy_course_content"
  """
  delete_lr_academy_course_content_by_pk(id: Int!): lr_academy_course_content

  """
  delete data from the table: "product_test"
  """
  delete_product_test(
    """filter the rows which have to be deleted"""
    where: product_test_bool_exp!
  ): product_test_mutation_response

  """
  delete single row from the table: "product_test"
  """
  delete_product_test_by_pk(id: Int!): product_test

  """
  delete data from the table: "test_time"
  """
  delete_test_time(
    """filter the rows which have to be deleted"""
    where: test_time_bool_exp!
  ): test_time_mutation_response

  """
  delete single row from the table: "test_time"
  """
  delete_test_time_by_pk(id: Int!): test_time

  """
  insert data into the table: "lr_academy_category"
  """
  insert_lr_academy_category(
    """the rows to be inserted"""
    objects: [lr_academy_category_insert_input!]!

    """upsert condition"""
    on_conflict: lr_academy_category_on_conflict
  ): lr_academy_category_mutation_response

  """
  insert a single row into the table: "lr_academy_category"
  """
  insert_lr_academy_category_one(
    """the row to be inserted"""
    object: lr_academy_category_insert_input!

    """upsert condition"""
    on_conflict: lr_academy_category_on_conflict
  ): lr_academy_category

  """
  insert data into the table: "lr_academy_course"
  """
  insert_lr_academy_course(
    """the rows to be inserted"""
    objects: [lr_academy_course_insert_input!]!

    """upsert condition"""
    on_conflict: lr_academy_course_on_conflict
  ): lr_academy_course_mutation_response

  """
  insert data into the table: "lr_academy_course_content"
  """
  insert_lr_academy_course_content(
    """the rows to be inserted"""
    objects: [lr_academy_course_content_insert_input!]!

    """upsert condition"""
    on_conflict: lr_academy_course_content_on_conflict
  ): lr_academy_course_content_mutation_response

  """
  insert a single row into the table: "lr_academy_course_content"
  """
  insert_lr_academy_course_content_one(
    """the row to be inserted"""
    object: lr_academy_course_content_insert_input!

    """upsert condition"""
    on_conflict: lr_academy_course_content_on_conflict
  ): lr_academy_course_content

  """
  insert a single row into the table: "lr_academy_course"
  """
  insert_lr_academy_course_one(
    """the row to be inserted"""
    object: lr_academy_course_insert_input!

    """upsert condition"""
    on_conflict: lr_academy_course_on_conflict
  ): lr_academy_course

  """
  insert data into the table: "product_test"
  """
  insert_product_test(
    """the rows to be inserted"""
    objects: [product_test_insert_input!]!

    """upsert condition"""
    on_conflict: product_test_on_conflict
  ): product_test_mutation_response

  """
  insert a single row into the table: "product_test"
  """
  insert_product_test_one(
    """the row to be inserted"""
    object: product_test_insert_input!

    """upsert condition"""
    on_conflict: product_test_on_conflict
  ): product_test

  """
  insert data into the table: "test_time"
  """
  insert_test_time(
    """the rows to be inserted"""
    objects: [test_time_insert_input!]!

    """upsert condition"""
    on_conflict: test_time_on_conflict
  ): test_time_mutation_response

  """
  insert a single row into the table: "test_time"
  """
  insert_test_time_one(
    """the row to be inserted"""
    object: test_time_insert_input!

    """upsert condition"""
    on_conflict: test_time_on_conflict
  ): test_time

  """
  update data of the table: "lr_academy_category"
  """
  update_lr_academy_category(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_category_set_input

    """filter the rows which have to be updated"""
    where: lr_academy_category_bool_exp!
  ): lr_academy_category_mutation_response

  """
  update single row of the table: "lr_academy_category"
  """
  update_lr_academy_category_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_category_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_category_set_input
    pk_columns: lr_academy_category_pk_columns_input!
  ): lr_academy_category

  """
  update data of the table: "lr_academy_course"
  """
  update_lr_academy_course(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_course_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_course_set_input

    """filter the rows which have to be updated"""
    where: lr_academy_course_bool_exp!
  ): lr_academy_course_mutation_response

  """
  update single row of the table: "lr_academy_course"
  """
  update_lr_academy_course_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_course_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_course_set_input
    pk_columns: lr_academy_course_pk_columns_input!
  ): lr_academy_course

  """
  update data of the table: "lr_academy_course_content"
  """
  update_lr_academy_course_content(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_course_content_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_course_content_set_input

    """filter the rows which have to be updated"""
    where: lr_academy_course_content_bool_exp!
  ): lr_academy_course_content_mutation_response

  """
  update single row of the table: "lr_academy_course_content"
  """
  update_lr_academy_course_content_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: lr_academy_course_content_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: lr_academy_course_content_set_input
    pk_columns: lr_academy_course_content_pk_columns_input!
  ): lr_academy_course_content

  """
  update data of the table: "product_test"
  """
  update_product_test(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_test_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_test_set_input

    """filter the rows which have to be updated"""
    where: product_test_bool_exp!
  ): product_test_mutation_response

  """
  update single row of the table: "product_test"
  """
  update_product_test_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: product_test_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: product_test_set_input
    pk_columns: product_test_pk_columns_input!
  ): product_test

  """
  update data of the table: "test_time"
  """
  update_test_time(
    """increments the numeric columns with given value of the filtered values"""
    _inc: test_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: test_time_set_input

    """filter the rows which have to be updated"""
    where: test_time_bool_exp!
  ): test_time_mutation_response

  """
  update single row of the table: "test_time"
  """
  update_test_time_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: test_time_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: test_time_set_input
    pk_columns: test_time_pk_columns_input!
  ): test_time
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "product_test"
"""
type product_test {
  id: Int!
  name: String!
}

"""
aggregated selection of "product_test"
"""
type product_test_aggregate {
  aggregate: product_test_aggregate_fields
  nodes: [product_test!]!
}

"""
aggregate fields of "product_test"
"""
type product_test_aggregate_fields {
  avg: product_test_avg_fields
  count(columns: [product_test_select_column!], distinct: Boolean): Int!
  max: product_test_max_fields
  min: product_test_min_fields
  stddev: product_test_stddev_fields
  stddev_pop: product_test_stddev_pop_fields
  stddev_samp: product_test_stddev_samp_fields
  sum: product_test_sum_fields
  var_pop: product_test_var_pop_fields
  var_samp: product_test_var_samp_fields
  variance: product_test_variance_fields
}

"""aggregate avg on columns"""
type product_test_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "product_test". All fields are combined with a logical 'AND'.
"""
input product_test_bool_exp {
  _and: [product_test_bool_exp!]
  _not: product_test_bool_exp
  _or: [product_test_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "product_test"
"""
enum product_test_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  product_test_pkey
}

"""
input type for incrementing numeric columns in table "product_test"
"""
input product_test_inc_input {
  id: Int
}

"""
input type for inserting data into table "product_test"
"""
input product_test_insert_input {
  id: Int
  name: String
}

"""aggregate max on columns"""
type product_test_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type product_test_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "product_test"
"""
type product_test_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [product_test!]!
}

"""
on_conflict condition type for table "product_test"
"""
input product_test_on_conflict {
  constraint: product_test_constraint!
  update_columns: [product_test_update_column!]! = []
  where: product_test_bool_exp
}

"""Ordering options when selecting data from "product_test"."""
input product_test_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: product_test"""
input product_test_pk_columns_input {
  id: Int!
}

"""
select columns of table "product_test"
"""
enum product_test_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "product_test"
"""
input product_test_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type product_test_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type product_test_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type product_test_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type product_test_sum_fields {
  id: Int
}

"""
update columns of table "product_test"
"""
enum product_test_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""aggregate var_pop on columns"""
type product_test_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type product_test_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type product_test_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "lr_academy_category"
  """
  lr_academy_category(
    """distinct select on columns"""
    distinct_on: [lr_academy_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_category_order_by!]

    """filter the rows returned"""
    where: lr_academy_category_bool_exp
  ): [lr_academy_category!]!

  """
  fetch aggregated fields from the table: "lr_academy_category"
  """
  lr_academy_category_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_category_order_by!]

    """filter the rows returned"""
    where: lr_academy_category_bool_exp
  ): lr_academy_category_aggregate!

  """
  fetch data from the table: "lr_academy_category" using primary key columns
  """
  lr_academy_category_by_pk(id: Int!): lr_academy_category

  """
  fetch data from the table: "lr_academy_course"
  """
  lr_academy_course(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): [lr_academy_course!]!

  """
  fetch aggregated fields from the table: "lr_academy_course"
  """
  lr_academy_course_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): lr_academy_course_aggregate!

  """
  fetch data from the table: "lr_academy_course" using primary key columns
  """
  lr_academy_course_by_pk(id: Int!): lr_academy_course

  """
  fetch data from the table: "lr_academy_course_content"
  """
  lr_academy_course_content(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_content_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_content_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_content_bool_exp
  ): [lr_academy_course_content!]!

  """
  fetch aggregated fields from the table: "lr_academy_course_content"
  """
  lr_academy_course_content_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_content_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_content_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_content_bool_exp
  ): lr_academy_course_content_aggregate!

  """
  fetch data from the table: "lr_academy_course_content" using primary key columns
  """
  lr_academy_course_content_by_pk(id: Int!): lr_academy_course_content

  """
  fetch data from the table: "product_test"
  """
  product_test(
    """distinct select on columns"""
    distinct_on: [product_test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_test_order_by!]

    """filter the rows returned"""
    where: product_test_bool_exp
  ): [product_test!]!

  """
  fetch aggregated fields from the table: "product_test"
  """
  product_test_aggregate(
    """distinct select on columns"""
    distinct_on: [product_test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_test_order_by!]

    """filter the rows returned"""
    where: product_test_bool_exp
  ): product_test_aggregate!

  """fetch data from the table: "product_test" using primary key columns"""
  product_test_by_pk(id: Int!): product_test

  """
  fetch data from the table: "test_time"
  """
  test_time(
    """distinct select on columns"""
    distinct_on: [test_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_time_order_by!]

    """filter the rows returned"""
    where: test_time_bool_exp
  ): [test_time!]!

  """
  fetch aggregated fields from the table: "test_time"
  """
  test_time_aggregate(
    """distinct select on columns"""
    distinct_on: [test_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_time_order_by!]

    """filter the rows returned"""
    where: test_time_bool_exp
  ): test_time_aggregate!

  """fetch data from the table: "test_time" using primary key columns"""
  test_time_by_pk(id: Int!): test_time
}

type subscription_root {
  """
  fetch data from the table: "lr_academy_category"
  """
  lr_academy_category(
    """distinct select on columns"""
    distinct_on: [lr_academy_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_category_order_by!]

    """filter the rows returned"""
    where: lr_academy_category_bool_exp
  ): [lr_academy_category!]!

  """
  fetch aggregated fields from the table: "lr_academy_category"
  """
  lr_academy_category_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_category_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_category_order_by!]

    """filter the rows returned"""
    where: lr_academy_category_bool_exp
  ): lr_academy_category_aggregate!

  """
  fetch data from the table: "lr_academy_category" using primary key columns
  """
  lr_academy_category_by_pk(id: Int!): lr_academy_category

  """
  fetch data from the table: "lr_academy_course"
  """
  lr_academy_course(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): [lr_academy_course!]!

  """
  fetch aggregated fields from the table: "lr_academy_course"
  """
  lr_academy_course_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_bool_exp
  ): lr_academy_course_aggregate!

  """
  fetch data from the table: "lr_academy_course" using primary key columns
  """
  lr_academy_course_by_pk(id: Int!): lr_academy_course

  """
  fetch data from the table: "lr_academy_course_content"
  """
  lr_academy_course_content(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_content_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_content_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_content_bool_exp
  ): [lr_academy_course_content!]!

  """
  fetch aggregated fields from the table: "lr_academy_course_content"
  """
  lr_academy_course_content_aggregate(
    """distinct select on columns"""
    distinct_on: [lr_academy_course_content_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [lr_academy_course_content_order_by!]

    """filter the rows returned"""
    where: lr_academy_course_content_bool_exp
  ): lr_academy_course_content_aggregate!

  """
  fetch data from the table: "lr_academy_course_content" using primary key columns
  """
  lr_academy_course_content_by_pk(id: Int!): lr_academy_course_content

  """
  fetch data from the table: "product_test"
  """
  product_test(
    """distinct select on columns"""
    distinct_on: [product_test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_test_order_by!]

    """filter the rows returned"""
    where: product_test_bool_exp
  ): [product_test!]!

  """
  fetch aggregated fields from the table: "product_test"
  """
  product_test_aggregate(
    """distinct select on columns"""
    distinct_on: [product_test_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_test_order_by!]

    """filter the rows returned"""
    where: product_test_bool_exp
  ): product_test_aggregate!

  """fetch data from the table: "product_test" using primary key columns"""
  product_test_by_pk(id: Int!): product_test

  """
  fetch data from the table: "test_time"
  """
  test_time(
    """distinct select on columns"""
    distinct_on: [test_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_time_order_by!]

    """filter the rows returned"""
    where: test_time_bool_exp
  ): [test_time!]!

  """
  fetch aggregated fields from the table: "test_time"
  """
  test_time_aggregate(
    """distinct select on columns"""
    distinct_on: [test_time_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_time_order_by!]

    """filter the rows returned"""
    where: test_time_bool_exp
  ): test_time_aggregate!

  """fetch data from the table: "test_time" using primary key columns"""
  test_time_by_pk(id: Int!): test_time
}

"""
columns and relationships of "test_time"
"""
type test_time {
  id: Int!
  time: timestamptz!
}

"""
aggregated selection of "test_time"
"""
type test_time_aggregate {
  aggregate: test_time_aggregate_fields
  nodes: [test_time!]!
}

"""
aggregate fields of "test_time"
"""
type test_time_aggregate_fields {
  avg: test_time_avg_fields
  count(columns: [test_time_select_column!], distinct: Boolean): Int!
  max: test_time_max_fields
  min: test_time_min_fields
  stddev: test_time_stddev_fields
  stddev_pop: test_time_stddev_pop_fields
  stddev_samp: test_time_stddev_samp_fields
  sum: test_time_sum_fields
  var_pop: test_time_var_pop_fields
  var_samp: test_time_var_samp_fields
  variance: test_time_variance_fields
}

"""aggregate avg on columns"""
type test_time_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "test_time". All fields are combined with a logical 'AND'.
"""
input test_time_bool_exp {
  _and: [test_time_bool_exp!]
  _not: test_time_bool_exp
  _or: [test_time_bool_exp!]
  id: Int_comparison_exp
  time: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "test_time"
"""
enum test_time_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  test_time_pkey
}

"""
input type for incrementing numeric columns in table "test_time"
"""
input test_time_inc_input {
  id: Int
}

"""
input type for inserting data into table "test_time"
"""
input test_time_insert_input {
  id: Int
  time: timestamptz
}

"""aggregate max on columns"""
type test_time_max_fields {
  id: Int
  time: timestamptz
}

"""aggregate min on columns"""
type test_time_min_fields {
  id: Int
  time: timestamptz
}

"""
response of any mutation on the table "test_time"
"""
type test_time_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [test_time!]!
}

"""
on_conflict condition type for table "test_time"
"""
input test_time_on_conflict {
  constraint: test_time_constraint!
  update_columns: [test_time_update_column!]! = []
  where: test_time_bool_exp
}

"""Ordering options when selecting data from "test_time"."""
input test_time_order_by {
  id: order_by
  time: order_by
}

"""primary key columns input for table: test_time"""
input test_time_pk_columns_input {
  id: Int!
}

"""
select columns of table "test_time"
"""
enum test_time_select_column {
  """column name"""
  id

  """column name"""
  time
}

"""
input type for updating data in table "test_time"
"""
input test_time_set_input {
  id: Int
  time: timestamptz
}

"""aggregate stddev on columns"""
type test_time_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type test_time_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type test_time_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type test_time_sum_fields {
  id: Int
}

"""
update columns of table "test_time"
"""
enum test_time_update_column {
  """column name"""
  id

  """column name"""
  time
}

"""aggregate var_pop on columns"""
type test_time_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type test_time_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type test_time_variance_fields {
  id: Float
}

scalar timestamptz

input timestamptz_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _cast: timestamptz_cast_exp
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

