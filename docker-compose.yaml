version: '3.6'
services:
  postgres:
    image: postgres:13
    restart: always
    environment: 
        - DATABASE_HOST=${DATABASE_HOST}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB} 
    ports: 
        - "5432:5432"
    volumes: 
        - postgres_data:/var/lib/postgresql/data
        - ./docker_postgres_init.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
  keycloak:
    image: quay.io/keycloak/keycloak:15.0.2
    ports:
      - 8078:8080
    depends_on:
      - postgres
    restart: always
    command:
      - '-Dkeycloak.profile.feature.upload_scripts=enabled'
      - '-Dkeycloak.migration.action=import'
      - '-Dkeycloak.migration.provider=singleFile'
      - '-Dkeycloak.migration.file=/tmp/master-realm.json'
      - '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING'
    volumes:
      - type: bind
        source: './keycloak/master-realm.json'
        target: '/tmp/master-realm.json'
    environment:
      DB_VENDOR: ${DB_VENDOR}
      DB_ADDR: ${DB_ADDR}
      DB_DATABASE: ${DB_DATABASE}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_PASSWORD: ${DB_PASSWORD}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PASSWORD}
  hasura:
    image: 'hasura/graphql-engine:v2.8.1.cli-migrations-v3'
    ports:
      - '8079:8080'
    volumes:
      - ./hasura/migrations:/hasura-migrations
      - ./hasura/metadata:/hasura-metadata
      - ./hasura/seeds:/hasura-seeds
    depends_on:
      - postgres
      - keycloak
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${HASURA_GRAPHQL_DATABASE_URL}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log, query-log"
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
  vx-template:
     build:
       context: ./
       dockerfile: Dockerfile
     ports:
       - 80
     restart: unless-stopped
volumes:
  postgres_data:
